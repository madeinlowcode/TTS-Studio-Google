// Importando m√≥dulos necess√°rios
const express = require('express');
const path = require('path');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const cors = require('cors');
require('dotenv').config(); // Carregar vari√°veis de ambiente
const { authenticate } = require('./users');

// Carregar audio-generator de forma segura (compatibilidade)
let audioGenerator = null;
try {
  const audioModule = require('./audio-generator');
  audioGenerator = audioModule.audioGenerator;
  console.log('‚úÖ M√≥dulo audio-generator (legacy) carregado com sucesso');
} catch (error) {
  console.error('‚ùå Erro ao carregar audio-generator:', error.message);
  console.log('‚ö†Ô∏è Servidor iniciar√° sem funcionalidades de √°udio legacy');
}

// Carregar novo sistema TTS unificado
let ttsManager = null;
try {
  const ttsModule = require('./modules/tts-manager');
  ttsManager = ttsModule.ttsManager;
  console.log('‚úÖ Sistema TTS unificado carregado com sucesso');
} catch (error) {
  console.error('‚ùå Erro ao carregar sistema TTS unificado:', error.message);
  console.log('‚ö†Ô∏è Servidor iniciar√° sem funcionalidades TTS v2');
}

// Inicializar o aplicativo Express
const app = express();

// Configurar CORS
app.use(cors({
  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
  credentials: true
}));

// Configurar middleware para processar JSON e dados de formul√°rio
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// Configurar sess√µes
app.use(session({
  secret: process.env.SESSION_SECRET || 'texto-para-audio-secreto-default',
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: false, // Em produ√ß√£o, defina como true para HTTPS
    maxAge: 24 * 60 * 60 * 1000, // 24 horas
    httpOnly: true, // Previne acesso via JavaScript
    path: '/' // Garantir que o cookie esteja dispon√≠vel em todo o site
  }
}));

// Middleware para debug de sess√£o
app.use((req, res, next) => {
  console.log('Sess√£o atual:', req.session.id, req.session.user ? 'Autenticado' : 'N√£o autenticado');
  next();
});

// Middleware para servir arquivos est√°ticos
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Middleware para verificar autentica√ß√£o (p√°ginas)
function isAuthenticated(req, res, next) {
  console.log('=== VERIFICA√á√ÉO DE AUTENTICA√á√ÉO ===');
  console.log('Session ID:', req.session.id);
  console.log('Session data:', req.session);
  console.log('User in session:', req.session.user);

  if (req.session && req.session.user) {
    console.log('‚úÖ Usu√°rio autenticado:', req.session.user.username);
    return next();
  }
  console.log('‚ùå Usu√°rio n√£o autenticado, redirecionando para login');
  res.redirect('/login.html');
}



// Verificar se o m√≥dulo de gera√ß√£o de √°udio est√° inicializado (legacy)
if (audioGenerator && audioGenerator.isInitialized()) {
  console.log('‚úÖ M√≥dulo de gera√ß√£o de √°udio legacy inicializado com sucesso');
} else {
  console.error('‚ùå M√≥dulo de gera√ß√£o de √°udio legacy n√£o dispon√≠vel');
  console.error('‚ö†Ô∏è Verifique se o arquivo de credenciais existe em: google/madeinlowcode.json');
}

// Verificar sistema TTS unificado
if (ttsManager) {
  const status = ttsManager.getSystemStatus();
  console.log('‚úÖ Sistema TTS unificado inicializado');
  console.log(`üé≠ Gemini TTS: ${status.gemini.available ? 'Dispon√≠vel' : 'Indispon√≠vel'}`);
  console.log(`üé§ Google Cloud TTS: ${status.googleCloud.available ? 'Dispon√≠vel' : 'Indispon√≠vel'}`);
  console.log(`üîÑ Sistema preferido: ${status.unified.preferredSystem}`);
} else {
  console.error('‚ùå Sistema TTS unificado n√£o dispon√≠vel');
}



// Servir arquivos est√°ticos (sem prote√ß√£o para arquivos b√°sicos)
app.use(express.static(path.join(__dirname), {
  index: false // N√£o servir index.html automaticamente
}));

// Proteger p√°ginas espec√≠ficas
app.get('/pages/dashboard.html', isAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, 'pages', 'dashboard.html'));
});

app.get('/pages/gemini-studio.html', isAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, 'pages', 'gemini-studio.html'));
});

app.get('/pages/multi-speaker.html', isAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, 'pages', 'multi-speaker.html'));
});

app.get('/pages/voice-lab.html', isAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, 'pages', 'voice-lab.html'));
});

app.get('/pages/api-docs.html', isAuthenticated, (req, res) => {
  res.sendFile(path.join(__dirname, 'pages', 'api-docs.html'));
});

// Servir outras p√°ginas sem prote√ß√£o (login, etc)
app.use('/pages', express.static(path.join(__dirname, 'pages')));

// Rotas de autentica√ß√£o
app.post('/auth/login', async (req, res) => {
  console.log('=== TENTATIVA DE LOGIN ===');
  console.log('Body recebido:', req.body);
  console.log('Session ID antes do login:', req.session.id);

  const { username, password } = req.body;

  // Verificar se os dados foram recebidos corretamente
  if (!username || !password) {
    console.error('‚ùå Dados de login incompletos:', { username, password });
    return res.redirect('/login.html?error=3');
  }

  try {
    console.log(`üîç Autenticando usu√°rio: ${username}`);
    const user = await authenticate(username, password);

    if (user) {
      console.log('‚úÖ Autentica√ß√£o bem-sucedida para:', username);
      console.log('üë§ Dados do usu√°rio:', user);

      // Armazenar usu√°rio na sess√£o
      req.session.user = user;
      console.log('üíæ Usu√°rio armazenado na sess√£o');
      console.log('üìã Session ap√≥s armazenar usu√°rio:', req.session);

      // Salvar a sess√£o explicitamente antes de redirecionar
      req.session.save((err) => {
        if (err) {
          console.error('‚ùå Erro ao salvar sess√£o:', err);
          return res.redirect('/login.html?error=4');
        }
        console.log('‚úÖ Sess√£o salva com sucesso!');
        console.log('üîÑ Redirecionando para /pages/dashboard.html');
        return res.redirect('/pages/dashboard.html');
      });
    } else {
      console.log('‚ùå Autentica√ß√£o falhou para:', username);
      res.redirect('/login.html?error=1');
    }
  } catch (error) {
    console.error('üí• Erro na autentica√ß√£o:', error);
    res.redirect('/login.html?error=2');
  }
});

app.get('/auth/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login.html');
});

// Rota principal - redireciona para dashboard ou login
app.get('/', (req, res) => {
  if (req.session.user) {
    res.redirect('/pages/dashboard.html');
  } else {
    res.redirect('/login.html');
  }
});

// Dashboard (protegido)
app.get('/dashboard', isAuthenticated, (req, res) => {
  console.log('üìä Servindo dashboard para usu√°rio autenticado');
  res.sendFile(path.join(__dirname, 'pages', 'dashboard.html'));
});

// Proteger a p√°gina do cliente
app.get('/client.html', isAuthenticated, (req, res) => {
  console.log('Servindo p√°gina do cliente para usu√°rio autenticado:', req.session.user.username);
  res.sendFile(path.join(__dirname, 'client.html'));
});

// Rota alternativa para a p√°gina do cliente (para compatibilidade)
app.get('/client', isAuthenticated, (req, res) => {
  console.log('Redirecionando /client para /client.html');
  res.redirect('/client.html');
});



// API para gerar √°udio (legacy)
app.post('/api/generate', isAuthenticated, async (req, res) => {
  try {
    const { text, voiceName } = req.body;

    if (!text || !voiceName) {
      return res.status(400).json({
        success: false,
        error: 'Par√¢metros inv√°lidos',
        details: 'Os par√¢metros text e voiceName s√£o obrigat√≥rios'
      });
    }

    // Verificar se o gerador de √°udio est√° dispon√≠vel e inicializado
    if (!audioGenerator || !audioGenerator.isInitialized()) {
      return res.status(500).json({
        success: false,
        error: 'Gerador de √°udio n√£o dispon√≠vel',
        details: 'Verifique se o arquivo de credenciais est√° presente e v√°lido'
      });
    }

    // Gerar o √°udio usando o m√≥dulo audioGenerator
    const audio = await audioGenerator.generateAudio(text, voiceName);

    // Registrar a atividade do usu√°rio
    console.log(`Usu√°rio ${req.session.user.username} gerou √°udio: "${text.substring(0, 30)}..."`);

    res.json({
      success: true,
      message: '√Åudio gerado com sucesso',
      audio: audio
    });
  } catch (error) {
    console.error('Erro ao gerar √°udio:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao gerar √°udio',
      details: error.message
    });
  }
});

// API para listar vozes dispon√≠veis
app.get('/api/voices', async (req, res) => {
  try {
    // Verificar se o gerador de √°udio est√° dispon√≠vel e inicializado
    if (!audioGenerator || !audioGenerator.isInitialized()) {
      return res.status(500).json({
        success: false,
        error: 'Gerador de √°udio n√£o dispon√≠vel',
        details: 'Verifique se o arquivo de credenciais est√° presente e v√°lido'
      });
    }

    // Obter as vozes dispon√≠veis
    const voices = await audioGenerator.listVoices();

    res.json({
      success: true,
      voices: voices
    });
  } catch (error) {
    console.error('Erro ao listar vozes:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao listar vozes',
      details: error.message
    });
  }
});

// API para listar √°udios gerados (legacy)
app.get('/api/audios', isAuthenticated, (req, res) => {
  try {
    // Verificar se o gerador de √°udio est√° dispon√≠vel
    if (!audioGenerator) {
      return res.status(500).json({
        success: false,
        error: 'Gerador de √°udio n√£o dispon√≠vel',
        details: 'M√≥dulo de √°udio n√£o foi carregado'
      });
    }

    // Obter a lista de √°udios gerados
    const audios = audioGenerator.listAudios();

    res.json({
      success: true,
      audios: audios
    });
  } catch (error) {
    console.error('Erro ao listar √°udios:', error);
    res.status(500).json({
      success: false,
      error: 'Erro ao listar √°udios',
      details: error.message
    });
  }
});

// Carregar e registrar rotas da API v2
try {
  const geminiRoutes = require('./api/gemini-routes');
  const voiceRoutes = require('./api/voice-routes');

  app.use('/api/v2', geminiRoutes);
  app.use('/api/voices', voiceRoutes);

  console.log('‚úÖ Rotas da API v2 registradas com sucesso');
} catch (error) {
  console.error('‚ùå Erro ao carregar rotas da API v2:', error.message);
}

// Informa√ß√µes da API (expandida)
app.get('/api', (req, res) => {
  const endpoints = [
    // API v1 (legacy)
    {
      path: '/api/generate',
      method: 'POST',
      description: 'Gerar √°udio a partir de texto (legacy)',
      version: 'v1'
    },
    {
      path: '/api/voices',
      method: 'GET',
      description: 'Listar vozes dispon√≠veis (legacy)',
      version: 'v1'
    },
    {
      path: '/api/audios',
      method: 'GET',
      description: 'Listar √°udios gerados (legacy)',
      version: 'v1'
    },
    // API v2 (nova)
    {
      path: '/api/v2/status',
      method: 'GET',
      description: 'Status dos sistemas TTS',
      version: 'v2'
    },
    {
      path: '/api/v2/voices/all',
      method: 'GET',
      description: 'Todas as vozes dispon√≠veis (unificado)',
      version: 'v2'
    },
    {
      path: '/api/v2/voices/gemini',
      method: 'GET',
      description: 'Vozes Gemini espec√≠ficas',
      version: 'v2'
    },
    {
      path: '/api/v2/generate-single',
      method: 'POST',
      description: 'Gerar √°udio single-speaker',
      version: 'v2'
    },
    {
      path: '/api/v2/generate-multi',
      method: 'POST',
      description: 'Gerar √°udio multi-speaker',
      version: 'v2'
    },
    {
      path: '/api/v2/models',
      method: 'GET',
      description: 'Modelos TTS dispon√≠veis',
      version: 'v2'
    }
  ];

  res.json({
    name: 'API de Convers√£o de Texto em Voz',
    version: '2.0.0',
    description: 'API unificada com suporte a Gemini 2.5 TTS e Google Cloud TTS',
    systems: ttsManager ? ttsManager.getSystemStatus() : null,
    endpoints: endpoints,
    documentation: {
      v1: 'Endpoints legacy mantidos para compatibilidade',
      v2: 'Novos endpoints com recursos avan√ßados'
    },
    timestamp: new Date().toISOString()
  });
});

// Iniciar o servidor
const PORT = process.env.PORT || 3003;
const HOST = process.env.HOST || 'localhost';

app.listen(PORT, HOST, () => {
  console.log(`üöÄ Servidor TTS Studio rodando em http://${HOST}:${PORT}`);
  console.log(`üìä Dashboard: http://${HOST}:${PORT}/pages/dashboard.html`);
  console.log(`üé≠ Gemini Studio: http://${HOST}:${PORT}/pages/gemini-studio.html`);
  console.log(`üë• Multi-Speaker: http://${HOST}:${PORT}/pages/multi-speaker.html`);
  console.log(`üß™ Voice Lab: http://${HOST}:${PORT}/pages/voice-lab.html`);
  console.log(`üîó API v2: http://${HOST}:${PORT}/api/v2/status`);
});
